% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query_snowflake.R
\name{query_sf}
\alias{query_sf}
\title{Query Snowflake}
\usage{
query_sf(
  q = "select 1 as test",
  dsn = "SnowFlake",
  database = "FLK_DUB_DB_DATALAKE_PRD",
  schema = "DIMENSIONAL_IAC",
  role = "FLK_DUB_ROL_DATALAKEBUSINESSANALYST_PRD",
  bigint = "integer",
  LogLevel = 0,
  params = list(),
  tracing = 0,
  show.query = FALSE
)
}
\arguments{
\item{q}{query}

\item{dsn}{driver name, default SnowFlake}

\item{database}{database, default FLK_DUB_DB_DATALAKE_PRD.}

\item{schema}{schema, default DIMENSIONAL_IAC}

\item{role}{Snowflake role, default FLK_DUB_ROL_DATALAKEBUSINESSANALYST_PRD.}

\item{bigint}{how do we treat bigints, default 'integer'}

\item{LogLevel}{set to zero to avoid printing connection messages}

\item{params}{optional list of parameters to be passed to the query}

\item{tracing}{level of error messages to be displayed}

\item{show.query}{show the query being sent, default = FALSE}
}
\value{
tibble
}
\description{
Query Snowflake.

Some useful databases/schemas:

\itemize{
  \item FLK_DUB_DB_DATALAKE_PRD.DIMENSIONAL_IAC
  \item WORKINGDB_EBS_PRD.METERING_OPERATIONS_TEST
  \item WORKINGDB_EBS_PRD.METERING_OPERATIONS_PUBLISH
  \item BIGCHANGE2175EDFENERGYLTD.BIGCHANGE_2175_EDF_ENERGY_LTD
  \item WORKINGDB_ALTERYX_EBS_DEV.DEV_CORE_MO
}

Useful roles:

\itemize{
  \item FLK_DUB_ROL_DATALAKEBUSINESSANALYST_PRD
  \item ROL_ENGINEER_METERING_EBS
}
}
\examples{
query_sf("select * from dimservicepoint limit 1", show.query = TRUE)

query_sf("select * from dimservicepoint where sk_servicepointid in (?id_)",
          params = list(id_ = DBI::SQL(paste(951495858:951495862, collapse=','))),
          show.query = TRUE)

query_sf("
with a as (
select value as x, *
from table(flatten(input => to_array([?my_values])))
)
select * from a",
params = list(my_values = DBI::SQL(paste(1:10, collapse=','))),
show.query = TRUE)

query_sf("with a as (
-- create a column (x) with the numbers 1-5
select value as x from table(flatten(input => to_array([1,2,3,4,5])))
)
-- select from a filtering to even numbers
select * from a
where a.x in (?my_values)",
params = list(
# example shows a tibble column being extracted and passed through pasteSQL()
my_values=pasteSQL(tibble(v=c(2,4,6,8,10)) |> pull(v)))
)

}
